"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
class Collection {
    constructor(arrayElements) {
        if (typeof arrayElements !== "undefined") {
            this.collection = arrayElements;
        }
        else {
            this.collection = [];
        }
        this.position = 0;
    }
    current() {
        if (this.collection.length > this.position) {
            return this.collection[this.position];
        }
        throw new Error("Not more items");
    }
    key() {
        return this.position;
    }
    valid() {
        return this.collection.length < this.position;
    }
    rewind() {
        this.position = 0;
    }
    add(object) {
        this.validateAdd(object);
        this.collection.push(object);
    }
    remove(key) {
        this.validateRemove(key);
        this.collection.splice(key, 1);
    }
    count() {
        return this.collection.length;
    }
    isEmpty() {
        return this.collection.length !== 0;
    }
    serialize() {
        const serialized = this.collection.map((object) => {
            return object.serialize();
        });
        return JSON.stringify(serialized);
    }
    next() {
        if (this.collection.length !== undefined && this.position < this.collection.length) {
            return {
                done: false,
                value: this.collection[this.position++],
            };
        }
        return {
            done: true,
            value: {},
        };
    }
    [Symbol.iterator]() {
        return this;
    }
    map(callback) {
        return this.collection.map(callback);
    }
    toArray() {
        return this.collection;
    }
    validateRemove(key) {
        return key >= 0;
    }
    addFromArray(array) {
        for (const element of array) {
            this.validateAdd(element);
            this.collection.push(element);
        }
    }
}
exports.Collection = Collection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2RkZC1saWIvQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFzQixVQUFVO0lBSTVCLFlBQW1CLGFBQW9DO1FBQ25ELElBQUksT0FBTyxhQUFhLEtBQUssV0FBVyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFDO1NBQ25DO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxPQUFPO1FBQ1YsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekM7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLEdBQUc7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUs7UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDbEQsQ0FBQztJQUVNLE1BQU07UUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRU0sR0FBRyxDQUFDLE1BQVc7UUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQVc7UUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLEtBQUs7UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFFTSxPQUFPO1FBQ1YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLFNBQVM7UUFDWixNQUFNLFVBQVUsR0FBVSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3JELE9BQU8sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNqQixVQUFVLENBQ2IsQ0FBQztJQUNOLENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUNoRixPQUFPO2dCQUNILElBQUksRUFBRSxLQUFLO2dCQUNYLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUMxQyxDQUFDO1NBQ0w7UUFFRCxPQUFPO1lBQ0gsSUFBSSxFQUFFLElBQUk7WUFDVixLQUFLLEVBQUUsRUFBd0I7U0FDbEMsQ0FBQztJQUNOLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxRQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLE9BQU87UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUlTLGNBQWMsQ0FBQyxHQUFXO1FBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRU8sWUFBWSxDQUFDLEtBQVM7UUFDMUIsS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLEVBQUU7WUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUxQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNqQztJQUNMLENBQUM7Q0FDSjtBQXRHRCxnQ0FzR0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29sbGVjdGlvbiBpbXBsZW1lbnRzIEl0ZXJhYmxlPFNlcmlhbGl6YWJsZU9iamVjdD4ge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBjb2xsZWN0aW9uOiBTZXJpYWxpemFibGVPYmplY3RbXTtcbiAgICBwcm90ZWN0ZWQgcG9zaXRpb246IG51bWJlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhcnJheUVsZW1lbnRzPzogU2VyaWFsaXphYmxlT2JqZWN0W10pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcnJheUVsZW1lbnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBhcnJheUVsZW1lbnRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IDA7XG4gICAgfVxuXG4gICAgcHVibGljIGN1cnJlbnQoKTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbi5sZW5ndGggPiB0aGlzLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uW3RoaXMucG9zaXRpb25dO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IG1vcmUgaXRlbXNcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGtleSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoIDwgdGhpcy5wb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmV3aW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkKG9iamVjdDogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVBZGQob2JqZWN0KTtcblxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24ucHVzaChvYmplY3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoa2V5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVJlbW92ZShrZXkpO1xuXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5zcGxpY2Uoa2V5LCAxKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgfVxuXG4gICAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoICE9PSAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXJpYWxpemUoKTogYW55IHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZDogYW55W10gPSB0aGlzLmNvbGxlY3Rpb24ubWFwKChvYmplY3QpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Quc2VyaWFsaXplKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIG5leHQoKTogSXRlcmF0b3JSZXN1bHQ8U2VyaWFsaXphYmxlT2JqZWN0PiB7XG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wb3NpdGlvbiA8IHRoaXMuY29sbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29sbGVjdGlvblt0aGlzLnBvc2l0aW9uKytdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHt9IGFzIFNlcmlhbGl6YWJsZU9iamVjdCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxTZXJpYWxpemFibGVPYmplY3Q+IHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIG1hcChjYWxsYmFjazogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24ubWFwKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9BcnJheSgpOiBTZXJpYWxpemFibGVPYmplY3RbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb247XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHZhbGlkYXRlQWRkKG9iamVjdDogYW55KTogYm9vbGVhbjtcblxuICAgIHByb3RlY3RlZCB2YWxpZGF0ZVJlbW92ZShrZXk6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4ga2V5ID49IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRGcm9tQXJyYXkoYXJyYXk6IFtdKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBhcnJheSkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFkZChlbGVtZW50KTtcblxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=